icc.2pl<-function(thetas,alphas,betas,N,J){
        p<-matrix(NA,N,J)
        for(i in 1:J){
                 p[,i]<-1/(1+exp(-(1.7)*alphas[i]*(thetas-betas[i])))
                          } 
p
}
######################
poss<-function(K){
temp<-list()
for(i in 1:K){
temp[[i]]<-c(0,1)
}
kposs<-expand.grid(temp)
kposs
}
#############################
Qpersonsim<-function(N,K,l,h){
require(MASS)
Sigma <- matrix(runif(K*K,l,h),K,K)
diag(Sigma)<-rep(1,K)
Q.person<-ifelse(mvrnorm(n=N, rep(0, K), Sigma)>0,1,0)
Q.person
}
######################################
complexQ<-function(l,h,i,J,K){
temp<-list()
for(i in 1:K){
temp[[i]]<-c(1,0)}
pskill<-expand.grid(temp)
subskill<-pskill[apply(pskill,1,sum)>(l-1) &apply(pskill,1,sum)<(h+1),]
tem=1
while(tem==1){
Q<-subskill[sample(c(1:nrow(subskill)),J,replace=TRUE),]
tem<-ifelse(all(apply(Q,2,sum)>(i-1)),0,1)
}
Qitem<-Q
colnames(Qitem)<-paste("s",c(1:ncol(pskill)),sep="")
rownames(Qitem)<-paste("item",c(1:J),sep="")
Qitem
}
#####################################################
classify<-function(Q.est,Q.person,K){
cl<-matrix(NA,nrow=4,ncol=K)
colnames(cl)<-paste("s",c(1:K),sep="")
rownames(cl)<-c("1->1","0->1","1->0","0->0")
for(i in 1:K){
table<-cbind(Q.est[,i],Q.person[,i])
colnames(table)<-c("esti","orig")
cl[1,i]<- nrow(matrix(table[table[,1]==1&table[,2]==1,],ncol=2))
cl[2,i]<- nrow(matrix(table[table[,1]==1&table[,2]==0,],ncol=2))
cl[3,i]<- nrow(matrix(table[table[,1]==0&table[,2]==1,],ncol=2))
cl[4,i]<- nrow(matrix(table[table[,1]==0&table[,2]==0,],ncol=2))
}
temp<-apply(cl[c(1,4),],2,sum)/nrow(Q.person)
temp
}
###################################################
DINA<-function(s,g,Q.item,Q.person,J,N){
p<-matrix(NA,N,J)
Q.item<-as.matrix(Q.item)
Q.person<-as.matrix(Q.person)
temp<-vector()
for(j in 1:J){
temp<-t(Q.person)^Q.item[j,]
p[,j]<-((1-s[j])^apply(temp,2,prod))*(g[j]^(1-apply(temp,2,prod))) 
}
colnames(p)<-paste("item_",c(1:J),sep="")
rownames(p)<-paste("p_",c(1:N),sep="")
p
}
####
DINO<-function(Qperson,Qitem,s,g){
N<-nrow(Qperson)
J<-nrow(Qitem)
temp<-matrix(NA,nrow=N,ncol=J)
for(i in 1:J){
temp[,i]<-1-apply(t(t(1-Qperson)^(unlist(Qitem[i,]))),1,prod)}
pro<-t(((1-s)^t(temp))*(g^t(1-temp)))
pro
}
################################################

draw.s<- function(s,g,X,Q.item,Q.person,J,N){
s1<-runif(J)

temp<-DINA(s,g,Q.item,Q.person,J,N)
temp<-ifelse(X,temp,1-temp)
rum0<-apply(temp,2,prod)

temp<-DINA(s1,g,Q.item,Q.person,J,N)
temp<-ifelse(X,temp,1-temp)
rum1<-apply(temp,2,prod)

accept<-ifelse(rum0==0,1,rum1/rum0)
accept<-ifelse(accept>1,1,accept)
accept<-ifelse(runif(J)<accept,1,0)
s<-ifelse(accept,s1,s)
s
}

###################################################
draw.g<-function(s,g,X,Q.item,Q.person,J,N){
g1<-runif(J,0,1-s)

temp<-DINA(s,g,Q.item,Q.person,J,N)
temp<-ifelse(X,temp,1-temp)
rum0<-apply(temp,2,prod)

temp<-DINA(s,g1,Q.item,Q.person,J,N)
temp<-ifelse(X,temp,1-temp)
rum1<-apply(temp,2,prod)

accept<-ifelse(rum0==0,1,rum1/rum0)
accept<-ifelse(accept>1,1,accept)
accept<-ifelse(runif(J)<accept,1,0)
g<-ifelse(accept,g1,g)
g
}

###################################################
draw.person<-function(s,g,X,Q.item,Q.person0,Q.personp,K,J,N){

temp<-DINA(s,g,Q.item,Q.person0,J,N) 
temp<-ifelse(X,temp,1-temp)
rum0<-apply(temp,1,prod)

temp<-DINA(s,g,Q.item,Q.personp,J,N)
temp<-ifelse(X,temp,1-temp)
rum1<-apply(temp,1,prod)  
 
accept<-ifelse(rum0==0,1,rum1/rum0)
accept<-ifelse(accept>1,1,accept)
accept<-ifelse(matrix(runif(N),nrow=N)<accept,1,0)
for(i in 1:K){
Q.person0[,i]<-ifelse(accept,Q.personp[,i],Q.person0[,i])
}
Q.person<-Q.person0
Q.person
}

###################################################
draw.G<-function(G0,alphas0,betas0,Q.person,N,K,prior.G.var=1){
           G1<-G0+rnorm(N,sd=0.5)
           
           temp<-icc.2pl(G0,alphas0,betas0,N,K)
           temp<-ifelse(Q.person,temp,1-temp)
           irt0<-apply(temp,1,prod)*dnorm(G0,sd=sqrt(prior.G.var))

           temp<-icc.2pl(G1,alphas0,betas0,N,K)
           temp<-ifelse(Q.person,temp,1-temp)
           irt1<-apply(temp,1,prod)*dnorm(G1,sd=sqrt(prior.G.var))

           accept<-ifelse(irt0==0,1,irt1/irt0)
           accept<-ifelse(accept>1,1,accept)
           accept<-ifelse(runif(N)<accept,1,0)
           G<-ifelse(accept,G1,G0)
           G
}

###################################################
draw.pl<-function(G0,alphas0,betas0,Q.person,N,K,prior.a.var=0.5,prior.b.var=1){
              logalphas0<-log(alphas0)
              logalphas1<-logalphas0+rnorm(K,sd=0.1)
              alphas1<-exp(logalphas1)

              betas1<-betas0+rnorm(K,sd=0.1)

              temp<-icc.2pl(G0,alphas0,betas0,N,K)
              temp<-ifelse(Q.person,temp,1-temp)
              irt0<-apply(log(temp),2,sum)+log(dnorm(betas0,sd=sqrt(prior.b.var)))+log(dnorm(logalphas0,sd=sqrt(prior.a.var)))-2*logalphas0
              temp<-icc.2pl(G0,alphas1,betas1,N,K)
              temp<-ifelse(Q.person,temp,1-temp)
              irt1<-apply(log(temp),2,sum)+log(dnorm(betas1,sd=sqrt(prior.b.var)))+log(dnorm(logalphas1,sd=sqrt(prior.a.var)))-2*logalphas1

              accept<-irt1-irt0
              accept<-ifelse(accept>0,1,exp(accept))
              accept<-ifelse(runif(K)<accept,1,0)
              
              alphas<-ifelse(accept,alphas1,alphas0)
              betas<-ifelse(accept,betas1,betas0)  
              pl<-list(alphas=alphas,betas=betas)
              pl
}

###################################################
ITER_HI<-function(Q.item,X,N,K,J,iter){
s0<-c(rep(0,J))
g0<-c(rep(0,J))
Q.person0<-matrix(rep(1,N*K),nrow=N,ncol=K)
G0<-rep(0,N)
betas0<-rep(0,K)
alphas0<-rep(1,K)

s_temp<-matrix(NA,nrow=J,ncol=iter,dimnames=list(c(paste("item_",c(1:J),sep="")),c(paste("iter",c(1:iter),sep=""))))
g_temp<-matrix(NA,nrow=J,ncol=iter,dimnames=list(c(paste("item_",c(1:J),sep="")),c(paste("iter",c(1:iter),sep=""))))
person_temp<-matrix(NA,nrow=N,ncol=iter*K)
Q.person.p<-matrix(NA,nrow=N,ncol=K,dimnames=list(c(paste("P_",c(1:N),sep="")),c(paste("Skill_",c(1:K),sep=""))))
G_temp<- matrix(NA,N,iter,dimnames=list(c(paste("P",c(1:N),sep="")),c(paste("iteraton",c(1:iter)))))
b_temp<-matrix(NA,K,iter,dimnames=list(c(paste("Item",c(1:K),sep="")),c(paste("iteraton",c(1:iter)))))
a_temp<-matrix(NA,K,iter,dimnames=list(c(paste("Item",c(1:K),sep="")),c(paste("iteraton",c(1:iter)))))
         
a=0
while(a<iter){
a=a+1
print(a)
s1<-draw.s(s0,g0,X,Q.item,Q.person0,J,N)
g1<-draw.g(s1,g0,X,Q.item,Q.person0,J,N)
G1<-draw.G(G0,alphas0,betas0,Q.person0,N,K)
pl<-draw.pl(G1,alphas0,betas0,Q.person0,N,K)
alphas1<-pl$alphas
betas1<-pl$betas
prob2<-icc.2pl(G1,alphas1,betas1,N,K)
Q.personp<-ifelse(matrix(runif(N*K),N,K)<prob2,1,0)
G0<-G1
alphas0<-alphas1
betas0<-betas1
b_temp[,a]<-betas1
a_temp[,a]<-alphas1
G_temp[,a]<-G1

Q.person1<-draw.person(s1,g1,X,Q.item,Q.person0,Q.personp,K,J,N)
s_temp[,a]<-s1
g_temp[,a]<-g1
person_temp[,c((K*a-(K-1)):(K*a))]<-Q.person1
s0<-s1
g0<-g1
Q.person0<-Q.person1
}
res<-list(s_temp=s_temp,g_temp=g_temp,person_temp=person_temp)
res
}
################################################
N=1000
K=3
J=25
iter=10000

temp<-list()
for(i in 1:K){
temp[[i]]<-c(1,0)}
skillpa<-matrix(unlist(expand.grid(temp)),nrow=2^K)

Q.person<-Qpersonsim(N,K,0.4,0.6)
Q.item<-complexQ(1,3,10,J,K)
######Q.item<-matrix(rbinom(J*K,1,0.5),nrow=J)
s<-runif(J,0.1,0.2)
g<-runif(J,0.1,0.2)
prob1<-DINA(s,g,Q.item,Q.person,J,N)
X<-ifelse(matrix(runif(N*J),N,J)<prob1,1,0)
res<-ITER_HI(Q.item1,X,N,K,J,iter)
s_tem<-res$s_temp[,4000:iter]
g_tem<-res$g_temp[,4000:iter]
person_tem<-res$person_temp

